                            | #######################################################################
                            | # Test for copying block of size 9;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f46805000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20900000000000000 | 	irmovq $9, %rdx		# src and dst have 9 elements
0x014: 30f69804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f73804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 80cf02000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Name: Wang Shao	ID: 520021911427
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
0x03b: 6300                 | 	xorq %rax, %rax		#count = 0
0x03d: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx		#limit = len - k + 1
0x047: 711102000000000000   | 	jle	Small
                            | 
0x050:                      | BigLoop:
0x050: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x05a: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x064: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x06e: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x078: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
0x082: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
0x08c: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14
0x096: 50173800000000000000 | 	mrmovq 56(%rdi), %rcx
0x0a0: 50374000000000000000 | 	mrmovq 64(%rdi), %rbx
0x0aa: 50574800000000000000 | 	mrmovq 72(%rdi), %rbp
                            | 
0x0b4:                      | target0:	
0x0b4: 6288                 | 	andq %r8, %r8		#val <= 0 ?
0x0b6: 71c900000000000000   | 	jle target1
0x0bf: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0c9:                      | target1:
0x0c9: 6299                 | 	andq %r9, %r9		#val <= 0 ?
0x0cb: 71de00000000000000   | 	jle target2
0x0d4: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0de:                      | target2:
0x0de: 62aa                 | 	andq %r10, %r10		#val <= 0 ?
0x0e0: 71f300000000000000   | 	jle target3
0x0e9: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0f3:                      | target3:
0x0f3: 62bb                 | 	andq %r11, %r11		#val <= 0 ?
0x0f5: 710801000000000000   | 	jle target4
0x0fe: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x108:                      | target4:
0x108: 62cc                 | 	andq %r12, %r12		#val <= 0 ?
0x10a: 711d01000000000000   | 	jle target5
0x113: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x11d:                      | target5:
0x11d: 62dd                 | 	andq %r13, %r13		#val <= 0 ?
0x11f: 713201000000000000   | 	jle target6
0x128: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x132:                      | target6:
0x132: 62ee                 | 	andq %r14, %r14		#val <= 0 ?
0x134: 714701000000000000   | 	jle target7
0x13d: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x147:                      | target7:
0x147: 6211                 | 	andq %rcx, %rcx		#val <= 0 ?
0x149: 715c01000000000000   | 	jle target8
0x152: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x15c:                      | target8:
0x15c: 6233                 | 	andq %rbx, %rbx		#val <= 0 ?
0x15e: 717101000000000000   | 	jle target9
0x167: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x171:                      | target9:
0x171: 6255                 | 	andq %rbp, %rbp		#val <= 0 ?
0x173: 718601000000000000   | 	jle BigNpos
0x17c: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x186:                      | BigNpos:
0x186: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x190: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x19a: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x1a4: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x1ae: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x1b8: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)
0x1c2: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)
0x1cc: 40163800000000000000 | 	rmmovq %rcx, 56(%rsi)
0x1d6: 40364000000000000000 | 	rmmovq %rbx, 64(%rsi)
0x1e0: 40564800000000000000 | 	rmmovq %rbp, 72(%rsi)
0x1ea: c0f75000000000000000 | 	iaddq $80, %rdi		#update src
0x1f4: c0f65000000000000000 | 	iaddq $80, %rsi		#update dst
0x1fe: c0f2f6ffffffffffffff | 	iaddq $-10, %rdx	#limit -= k
0x208: 765000000000000000   | 	jg BigLoop
                            | 
0x211:                      | Small:
0x211: c0f20800000000000000 | 	iaddq $8, %rdx		# len = limit + k1 - 1 limit = len - k2 + 1
0x21b: 719d02000000000000   | 	jle Tiny
                            | 
0x224:                      | SmallLoop:
0x224: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x22e: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
                            | 
0x238:                      | next0:
0x238: 6288                 | 	andq %r8, %r8
0x23a: 714d02000000000000   | 	jle next1
0x243: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x24d:                      | next1:
0x24d: 6299                 | 	andq %r9, %r9
0x24f: 716202000000000000   | 	jle SmallNpos
0x258: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x262:                      | SmallNpos:
0x262: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x26c: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x276: c0f71000000000000000 | 	iaddq $16, %rdi
0x280: c0f61000000000000000 | 	iaddq $16, %rsi
0x28a: c0f2feffffffffffffff | 	iaddq $-2, %rdx		# update limit
0x294: 762402000000000000   | 	jg SmallLoop
                            | 
0x29d:                      | Tiny:
0x29d: c0f20100000000000000 | 	iaddq $1, %rdx		# len = limit + k - 1
0x2a7: 71ce02000000000000   | 	jle Done
0x2b0: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x2ba: c0f00100000000000000 | 	iaddq $1, %rax
0x2c4: 40860000000000000000 | 	rmmovq %r8, (%rsi)
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2ce:                      | Done:
0x2ce: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x2cf:                      | End:
                            | #/* $end ncopy-ys */
0x2cf:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 4.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x2cf:                      | check:
                            | 	# Return value test
0x2cf: 30fa0400000000000000 | 	irmovq $4,%r10
0x2d9: 61a0                 | 	subq %r10,%rax
0x2db: 73f702000000000000   | 	je checkb
0x2e4: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x2ee: 703504000000000000   | 	jmp cdone
0x2f7:                      | checkb:
                            | 	# Code length check
0x2f7: 30f0cf02000000000000 | 	irmovq EndFun,%rax
0x301: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x30b: 6120                 | 	subq %rdx,%rax
0x30d: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x317: 6102                 | 	subq %rax,%rdx
0x319: 753503000000000000   | 	jge checkm
0x322: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x32c: 703504000000000000   | 	jmp cdone
0x335:                      | checkm:
0x335: 30f29804000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x33f: 30f33804000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x349: 30f70900000000000000 | 	irmovq $9,%rdi  # Count
0x353: 6277                 | 	andq %rdi,%rdi
0x355: 73b303000000000000   | 	je checkpre         # Skip check if count = 0
0x35e:                      | mcloop:
0x35e: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x368: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x372: 6160                 | 	subq %rsi,%rax
0x374: 739003000000000000   | 	je  mok
0x37d: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x387: 703504000000000000   | 	jmp cdone
0x390:                      | mok:
0x390: 30f00800000000000000 | 	irmovq $8,%rax
0x39a: 6002                 | 	addq %rax,%rdx	  # dest ++
0x39c: 6003                 | 	addq %rax,%rbx    # src++
0x39e: 30f00100000000000000 | 	irmovq $1,%rax
0x3a8: 6107                 | 	subq %rax,%rdi    # cnt--
0x3aa: 765e03000000000000   | 	jg mcloop
0x3b3:                      | checkpre:
                            | 	# Check for corruption
0x3b3: 30f29004000000000000 | 	irmovq Predest,%rdx
0x3bd: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x3c7: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x3d1: 6120                 | 	subq %rdx,%rax
0x3d3: 73ef03000000000000   | 	je checkpost
0x3dc: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x3e6: 703504000000000000   | 	jmp cdone
0x3ef:                      | checkpost:
                            | 	# Check for corruption
0x3ef: 30f2e004000000000000 | 	irmovq Postdest,%rdx
0x3f9: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x403: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x40d: 6120                 | 	subq %rdx,%rax
0x40f: 732b04000000000000   | 	je checkok
0x418: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x422: 703504000000000000   | 	jmp cdone
0x42b:                      | checkok:
                            | 	# Successful checks
0x42b: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x435:                      | cdone:
0x435: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x438:                      | 	.align 8
0x438:                      | src:
0x438: ffffffffffffffff     | 	.quad -1
0x440: feffffffffffffff     | 	.quad -2
0x448: 0300000000000000     | 	.quad 3
0x450: 0400000000000000     | 	.quad 4
0x458: 0500000000000000     | 	.quad 5
0x460: faffffffffffffff     | 	.quad -6
0x468: f9ffffffffffffff     | 	.quad -7
0x470: 0800000000000000     | 	.quad 8
0x478: f7ffffffffffffff     | 	.quad -9
0x480: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x490:                      | 	.align 16
0x490:                      | Predest:
0x490: fadebc0000000000     | 	.quad 0xbcdefa
0x498:                      | dest:
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0:                      | Postdest:
0x4e0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x4e8:                      | .align 8
                            | # Run time stack
0x4e8: 0000000000000000     | 	.quad 0
0x4f0: 0000000000000000     | 	.quad 0
0x4f8: 0000000000000000     | 	.quad 0
0x500: 0000000000000000     | 	.quad 0
0x508: 0000000000000000     | 	.quad 0
0x510: 0000000000000000     | 	.quad 0
0x518: 0000000000000000     | 	.quad 0
0x520: 0000000000000000     | 	.quad 0
0x528: 0000000000000000     | 	.quad 0
0x530: 0000000000000000     | 	.quad 0
0x538: 0000000000000000     | 	.quad 0
0x540: 0000000000000000     | 	.quad 0
0x548: 0000000000000000     | 	.quad 0
0x550: 0000000000000000     | 	.quad 0
0x558: 0000000000000000     | 	.quad 0
0x560: 0000000000000000     | 	.quad 0
                            | 
0x568:                      | Stack:
