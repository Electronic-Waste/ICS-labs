#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Name: Wang Shao	ID: 520021911427
# Describe how and why you modified the baseline code.
# 1. Use "10 x 1" Loop Unrolling for data block of which size is len
# 2. Use "2 x 1" Loop Unrolling for data block of which size is len % 10
#	 (Process data which are not dealt with in 1)
# 3. Deal with the last instruction (if len is odd)
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	iaddq $-9, %rdx		#limit = len - k + 1
	jle	Small

BigLoop:
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rcx
	mrmovq 64(%rdi), %rbx
	mrmovq 72(%rdi), %rbp

target0:	
	andq %r8, %r8		#val <= 0 ?
	jle target1
	iaddq $1, %rax

target1:
	andq %r9, %r9		#val <= 0 ?
	jle target2
	iaddq $1, %rax

target2:
	andq %r10, %r10		#val <= 0 ?
	jle target3
	iaddq $1, %rax

target3:
	andq %r11, %r11		#val <= 0 ?
	jle target4
	iaddq $1, %rax

target4:
	andq %r12, %r12		#val <= 0 ?
	jle target5
	iaddq $1, %rax

target5:
	andq %r13, %r13		#val <= 0 ?
	jle target6
	iaddq $1, %rax

target6:
	andq %r14, %r14		#val <= 0 ?
	jle target7
	iaddq $1, %rax

target7:
	andq %rcx, %rcx		#val <= 0 ?
	jle target8
	iaddq $1, %rax

target8:
	andq %rbx, %rbx		#val <= 0 ?
	jle target9
	iaddq $1, %rax

target9:
	andq %rbp, %rbp		#val <= 0 ?
	jle BigNpos
	iaddq $1, %rax

BigNpos:
	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	rmmovq %r12, 32(%rsi)
	rmmovq %r13, 40(%rsi)
	rmmovq %r14, 48(%rsi)
	rmmovq %rcx, 56(%rsi)
	rmmovq %rbx, 64(%rsi)
	rmmovq %rbp, 72(%rsi)
	iaddq $80, %rdi		#update src
	iaddq $80, %rsi		#update dst
	iaddq $-10, %rdx	#limit -= k
	jg BigLoop

Small:
	iaddq $8, %rdx		# len = limit + k1 - 1 limit = len - k2 + 1
	jle Tiny

SmallLoop:
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9

next0:
	andq %r8, %r8
	jle next1
	iaddq $1, %rax

next1:
	andq %r9, %r9
	jle SmallNpos
	iaddq $1, %rax

SmallNpos:
	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)
	iaddq $16, %rdi
	iaddq $16, %rsi
	iaddq $-2, %rdx		# update limit
	jg SmallLoop

Tiny:
	iaddq $1, %rdx		# len = limit + k - 1
	mrmovq (%rdi), %r8
	jle Done
	rmmovq %r8, (%rsi)
	andq %r8, %r8
	jle Done
	iaddq $1, %rax
	

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 2
	.quad 3
	.quad 4
	.quad 5
	.quad -6
	.quad 7
	.quad 8
	.quad 9
	.quad -10
	.quad -11
	.quad 12
	.quad -13
	.quad 14
	.quad 15
	.quad -16
	.quad -17
	.quad 18
	.quad -19
	.quad -20
	.quad -21
	.quad -22
	.quad -23
	.quad -24
	.quad -25
	.quad 26
	.quad -27
	.quad -28
	.quad 29
	.quad -30
	.quad -31
	.quad 32
	.quad 33
	.quad -34
	.quad 35
	.quad 36
	.quad 37
	.quad -38
	.quad -39
	.quad 40
	.quad 41
	.quad 42
	.quad -43
	.quad 44
	.quad 45
	.quad -46
	.quad 47
	.quad -48
	.quad 49
	.quad 50
	.quad -51
	.quad -52
	.quad 53
	.quad 54
	.quad 55
	.quad -56
	.quad 57
	.quad -58
	.quad -59
	.quad -60
	.quad -61
	.quad -62
	.quad -63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
