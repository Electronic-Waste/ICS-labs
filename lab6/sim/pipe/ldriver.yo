                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f45807000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6d804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7d002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Name: Wang Shao	ID: 520021911427
                            | # Describe how and why you modified the baseline code.
                            | # 1. Use "10 x 1" Loop Unrolling for data block of which size is len
                            | # 2. Use "2 x 1" Loop Unrolling for data block of which size is len % 10
                            | #	 (Process data which are not dealt with in 1)
                            | # 3. Deal with the last instruction (if len is odd)
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
0x032: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx		#limit = len - k + 1
0x03c: 710602000000000000   | 	jle	Small
                            | 
0x045:                      | BigLoop:
0x045: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x04f: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x059: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x063: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x06d: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
0x077: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
0x081: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14
0x08b: 50173800000000000000 | 	mrmovq 56(%rdi), %rcx
0x095: 50374000000000000000 | 	mrmovq 64(%rdi), %rbx
0x09f: 50574800000000000000 | 	mrmovq 72(%rdi), %rbp
                            | 
0x0a9:                      | target0:	
0x0a9: 6288                 | 	andq %r8, %r8		#val <= 0 ?
0x0ab: 71be00000000000000   | 	jle target1
0x0b4: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0be:                      | target1:
0x0be: 6299                 | 	andq %r9, %r9		#val <= 0 ?
0x0c0: 71d300000000000000   | 	jle target2
0x0c9: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0d3:                      | target2:
0x0d3: 62aa                 | 	andq %r10, %r10		#val <= 0 ?
0x0d5: 71e800000000000000   | 	jle target3
0x0de: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0e8:                      | target3:
0x0e8: 62bb                 | 	andq %r11, %r11		#val <= 0 ?
0x0ea: 71fd00000000000000   | 	jle target4
0x0f3: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0fd:                      | target4:
0x0fd: 62cc                 | 	andq %r12, %r12		#val <= 0 ?
0x0ff: 711201000000000000   | 	jle target5
0x108: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x112:                      | target5:
0x112: 62dd                 | 	andq %r13, %r13		#val <= 0 ?
0x114: 712701000000000000   | 	jle target6
0x11d: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x127:                      | target6:
0x127: 62ee                 | 	andq %r14, %r14		#val <= 0 ?
0x129: 713c01000000000000   | 	jle target7
0x132: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x13c:                      | target7:
0x13c: 6211                 | 	andq %rcx, %rcx		#val <= 0 ?
0x13e: 715101000000000000   | 	jle target8
0x147: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x151:                      | target8:
0x151: 6233                 | 	andq %rbx, %rbx		#val <= 0 ?
0x153: 716601000000000000   | 	jle target9
0x15c: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x166:                      | target9:
0x166: 6255                 | 	andq %rbp, %rbp		#val <= 0 ?
0x168: 717b01000000000000   | 	jle BigNpos
0x171: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x17b:                      | BigNpos:
0x17b: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x185: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x18f: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x199: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x1a3: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x1ad: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)
0x1b7: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)
0x1c1: 40163800000000000000 | 	rmmovq %rcx, 56(%rsi)
0x1cb: 40364000000000000000 | 	rmmovq %rbx, 64(%rsi)
0x1d5: 40564800000000000000 | 	rmmovq %rbp, 72(%rsi)
0x1df: c0f75000000000000000 | 	iaddq $80, %rdi		#update src
0x1e9: c0f65000000000000000 | 	iaddq $80, %rsi		#update dst
0x1f3: c0f2f6ffffffffffffff | 	iaddq $-10, %rdx	#limit -= k
0x1fd: 764500000000000000   | 	jg BigLoop
                            | 
0x206:                      | Small:
0x206: c0f20800000000000000 | 	iaddq $8, %rdx		# len = limit + k1 - 1 limit = len - k2 + 1
0x210: 719202000000000000   | 	jle Tiny
                            | 
0x219:                      | SmallLoop:
0x219: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x223: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
                            | 
0x22d:                      | next0:
0x22d: 6288                 | 	andq %r8, %r8
0x22f: 714202000000000000   | 	jle next1
0x238: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x242:                      | next1:
0x242: 6299                 | 	andq %r9, %r9
0x244: 715702000000000000   | 	jle SmallNpos
0x24d: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x257:                      | SmallNpos:
0x257: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x261: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x26b: c0f71000000000000000 | 	iaddq $16, %rdi
0x275: c0f61000000000000000 | 	iaddq $16, %rsi
0x27f: c0f2feffffffffffffff | 	iaddq $-2, %rdx		# update limit
0x289: 761902000000000000   | 	jg SmallLoop
                            | 
0x292:                      | Tiny:
0x292: c0f20100000000000000 | 	iaddq $1, %rdx		# len = limit + k - 1
0x29c: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x2a6: 71ce02000000000000   | 	jle Done
0x2af: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x2b9: 6288                 | 	andq %r8, %r8
0x2bb: 71ce02000000000000   | 	jle Done
0x2c4: c0f00100000000000000 | 	iaddq $1, %rax
                            | 	
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2ce:                      | Done:
0x2ce: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x2cf:                      | End:
                            | #/* $end ncopy-ys */
0x2cf:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x2d0:                      | 	.align 8
0x2d0:                      | src:
0x2d0: 0100000000000000     | 	.quad 1
0x2d8: 0200000000000000     | 	.quad 2
0x2e0: 0300000000000000     | 	.quad 3
0x2e8: 0400000000000000     | 	.quad 4
0x2f0: 0500000000000000     | 	.quad 5
0x2f8: faffffffffffffff     | 	.quad -6
0x300: 0700000000000000     | 	.quad 7
0x308: 0800000000000000     | 	.quad 8
0x310: 0900000000000000     | 	.quad 9
0x318: f6ffffffffffffff     | 	.quad -10
0x320: f5ffffffffffffff     | 	.quad -11
0x328: 0c00000000000000     | 	.quad 12
0x330: f3ffffffffffffff     | 	.quad -13
0x338: 0e00000000000000     | 	.quad 14
0x340: 0f00000000000000     | 	.quad 15
0x348: f0ffffffffffffff     | 	.quad -16
0x350: efffffffffffffff     | 	.quad -17
0x358: 1200000000000000     | 	.quad 18
0x360: edffffffffffffff     | 	.quad -19
0x368: ecffffffffffffff     | 	.quad -20
0x370: ebffffffffffffff     | 	.quad -21
0x378: eaffffffffffffff     | 	.quad -22
0x380: e9ffffffffffffff     | 	.quad -23
0x388: e8ffffffffffffff     | 	.quad -24
0x390: e7ffffffffffffff     | 	.quad -25
0x398: 1a00000000000000     | 	.quad 26
0x3a0: e5ffffffffffffff     | 	.quad -27
0x3a8: e4ffffffffffffff     | 	.quad -28
0x3b0: 1d00000000000000     | 	.quad 29
0x3b8: e2ffffffffffffff     | 	.quad -30
0x3c0: e1ffffffffffffff     | 	.quad -31
0x3c8: 2000000000000000     | 	.quad 32
0x3d0: 2100000000000000     | 	.quad 33
0x3d8: deffffffffffffff     | 	.quad -34
0x3e0: 2300000000000000     | 	.quad 35
0x3e8: 2400000000000000     | 	.quad 36
0x3f0: 2500000000000000     | 	.quad 37
0x3f8: daffffffffffffff     | 	.quad -38
0x400: d9ffffffffffffff     | 	.quad -39
0x408: 2800000000000000     | 	.quad 40
0x410: 2900000000000000     | 	.quad 41
0x418: 2a00000000000000     | 	.quad 42
0x420: d5ffffffffffffff     | 	.quad -43
0x428: 2c00000000000000     | 	.quad 44
0x430: 2d00000000000000     | 	.quad 45
0x438: d2ffffffffffffff     | 	.quad -46
0x440: 2f00000000000000     | 	.quad 47
0x448: d0ffffffffffffff     | 	.quad -48
0x450: 3100000000000000     | 	.quad 49
0x458: 3200000000000000     | 	.quad 50
0x460: cdffffffffffffff     | 	.quad -51
0x468: ccffffffffffffff     | 	.quad -52
0x470: 3500000000000000     | 	.quad 53
0x478: 3600000000000000     | 	.quad 54
0x480: 3700000000000000     | 	.quad 55
0x488: c8ffffffffffffff     | 	.quad -56
0x490: 3900000000000000     | 	.quad 57
0x498: c6ffffffffffffff     | 	.quad -58
0x4a0: c5ffffffffffffff     | 	.quad -59
0x4a8: c4ffffffffffffff     | 	.quad -60
0x4b0: c3ffffffffffffff     | 	.quad -61
0x4b8: c2ffffffffffffff     | 	.quad -62
0x4c0: c1ffffffffffffff     | 	.quad -63
0x4c8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x4d0:                      | 	.align 16
0x4d0:                      | Predest:
0x4d0: fadebc0000000000     | 	.quad 0xbcdefa
0x4d8:                      | dest:
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0:                      | Postdest:
0x6d0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x6d8:                      | .align 8
                            | # Run time stack
0x6d8: 0000000000000000     | 	.quad 0
0x6e0: 0000000000000000     | 	.quad 0
0x6e8: 0000000000000000     | 	.quad 0
0x6f0: 0000000000000000     | 	.quad 0
0x6f8: 0000000000000000     | 	.quad 0
0x700: 0000000000000000     | 	.quad 0
0x708: 0000000000000000     | 	.quad 0
0x710: 0000000000000000     | 	.quad 0
0x718: 0000000000000000     | 	.quad 0
0x720: 0000000000000000     | 	.quad 0
0x728: 0000000000000000     | 	.quad 0
0x730: 0000000000000000     | 	.quad 0
0x738: 0000000000000000     | 	.quad 0
0x740: 0000000000000000     | 	.quad 0
0x748: 0000000000000000     | 	.quad 0
0x750: 0000000000000000     | 	.quad 0
                            | 
0x758:                      | Stack:
